$comment
	File created using the following command:
		vcd file alu.msim.vcd -direction
$end
$date
	Fri Sep 16 22:38:51 2022
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module alu_vlg_vec_tst $end
$var reg 5 ! ctrl_ALUopcode [4:0] $end
$var reg 5 " ctrl_shiftamt [4:0] $end
$var reg 32 # data_operandA [31:0] $end
$var reg 32 $ data_operandB [31:0] $end
$var wire 1 % data_result [31] $end
$var wire 1 & data_result [30] $end
$var wire 1 ' data_result [29] $end
$var wire 1 ( data_result [28] $end
$var wire 1 ) data_result [27] $end
$var wire 1 * data_result [26] $end
$var wire 1 + data_result [25] $end
$var wire 1 , data_result [24] $end
$var wire 1 - data_result [23] $end
$var wire 1 . data_result [22] $end
$var wire 1 / data_result [21] $end
$var wire 1 0 data_result [20] $end
$var wire 1 1 data_result [19] $end
$var wire 1 2 data_result [18] $end
$var wire 1 3 data_result [17] $end
$var wire 1 4 data_result [16] $end
$var wire 1 5 data_result [15] $end
$var wire 1 6 data_result [14] $end
$var wire 1 7 data_result [13] $end
$var wire 1 8 data_result [12] $end
$var wire 1 9 data_result [11] $end
$var wire 1 : data_result [10] $end
$var wire 1 ; data_result [9] $end
$var wire 1 < data_result [8] $end
$var wire 1 = data_result [7] $end
$var wire 1 > data_result [6] $end
$var wire 1 ? data_result [5] $end
$var wire 1 @ data_result [4] $end
$var wire 1 A data_result [3] $end
$var wire 1 B data_result [2] $end
$var wire 1 C data_result [1] $end
$var wire 1 D data_result [0] $end
$var wire 1 E isLessThan $end
$var wire 1 F isNotEqual $end
$var wire 1 G overflow $end

$scope module i1 $end
$var wire 1 H gnd $end
$var wire 1 I vcc $end
$var wire 1 J unknown $end
$var tri1 1 K devclrn $end
$var tri1 1 L devpor $end
$var tri1 1 M devoe $end
$var wire 1 N data_operandA[0]~input_o $end
$var wire 1 O data_operandA[1]~input_o $end
$var wire 1 P data_operandA[2]~input_o $end
$var wire 1 Q data_operandA[3]~input_o $end
$var wire 1 R data_operandA[4]~input_o $end
$var wire 1 S data_operandA[5]~input_o $end
$var wire 1 T data_operandA[6]~input_o $end
$var wire 1 U data_operandA[7]~input_o $end
$var wire 1 V data_operandA[8]~input_o $end
$var wire 1 W data_operandA[9]~input_o $end
$var wire 1 X data_operandA[10]~input_o $end
$var wire 1 Y data_operandA[11]~input_o $end
$var wire 1 Z data_operandA[12]~input_o $end
$var wire 1 [ data_operandA[13]~input_o $end
$var wire 1 \ data_operandA[14]~input_o $end
$var wire 1 ] data_operandA[15]~input_o $end
$var wire 1 ^ data_operandA[16]~input_o $end
$var wire 1 _ data_operandA[17]~input_o $end
$var wire 1 ` data_operandA[18]~input_o $end
$var wire 1 a data_operandA[19]~input_o $end
$var wire 1 b data_operandA[20]~input_o $end
$var wire 1 c data_operandA[21]~input_o $end
$var wire 1 d data_operandA[22]~input_o $end
$var wire 1 e data_operandA[23]~input_o $end
$var wire 1 f data_operandA[24]~input_o $end
$var wire 1 g data_operandA[25]~input_o $end
$var wire 1 h data_operandA[26]~input_o $end
$var wire 1 i data_operandA[27]~input_o $end
$var wire 1 j data_operandA[28]~input_o $end
$var wire 1 k data_operandA[29]~input_o $end
$var wire 1 l data_operandA[30]~input_o $end
$var wire 1 m data_operandA[31]~input_o $end
$var wire 1 n data_operandB[0]~input_o $end
$var wire 1 o data_operandB[1]~input_o $end
$var wire 1 p data_operandB[2]~input_o $end
$var wire 1 q data_operandB[3]~input_o $end
$var wire 1 r data_operandB[4]~input_o $end
$var wire 1 s data_operandB[5]~input_o $end
$var wire 1 t data_operandB[6]~input_o $end
$var wire 1 u data_operandB[7]~input_o $end
$var wire 1 v data_operandB[8]~input_o $end
$var wire 1 w data_operandB[9]~input_o $end
$var wire 1 x data_operandB[10]~input_o $end
$var wire 1 y data_operandB[11]~input_o $end
$var wire 1 z data_operandB[12]~input_o $end
$var wire 1 { data_operandB[13]~input_o $end
$var wire 1 | data_operandB[14]~input_o $end
$var wire 1 } data_operandB[15]~input_o $end
$var wire 1 ~ data_operandB[16]~input_o $end
$var wire 1 !! data_operandB[17]~input_o $end
$var wire 1 "! data_operandB[18]~input_o $end
$var wire 1 #! data_operandB[19]~input_o $end
$var wire 1 $! data_operandB[20]~input_o $end
$var wire 1 %! data_operandB[21]~input_o $end
$var wire 1 &! data_operandB[22]~input_o $end
$var wire 1 '! data_operandB[23]~input_o $end
$var wire 1 (! data_operandB[24]~input_o $end
$var wire 1 )! data_operandB[25]~input_o $end
$var wire 1 *! data_operandB[26]~input_o $end
$var wire 1 +! data_operandB[27]~input_o $end
$var wire 1 ,! data_operandB[28]~input_o $end
$var wire 1 -! data_operandB[29]~input_o $end
$var wire 1 .! data_operandB[30]~input_o $end
$var wire 1 /! data_operandB[31]~input_o $end
$var wire 1 0! ctrl_ALUopcode[1]~input_o $end
$var wire 1 1! ctrl_ALUopcode[2]~input_o $end
$var wire 1 2! ctrl_ALUopcode[3]~input_o $end
$var wire 1 3! ctrl_ALUopcode[4]~input_o $end
$var wire 1 4! ctrl_shiftamt[0]~input_o $end
$var wire 1 5! ctrl_shiftamt[1]~input_o $end
$var wire 1 6! ctrl_shiftamt[2]~input_o $end
$var wire 1 7! ctrl_shiftamt[3]~input_o $end
$var wire 1 8! ctrl_shiftamt[4]~input_o $end
$var wire 1 9! data_result[0]~output_o $end
$var wire 1 :! data_result[1]~output_o $end
$var wire 1 ;! data_result[2]~output_o $end
$var wire 1 <! data_result[3]~output_o $end
$var wire 1 =! data_result[4]~output_o $end
$var wire 1 >! data_result[5]~output_o $end
$var wire 1 ?! data_result[6]~output_o $end
$var wire 1 @! data_result[7]~output_o $end
$var wire 1 A! data_result[8]~output_o $end
$var wire 1 B! data_result[9]~output_o $end
$var wire 1 C! data_result[10]~output_o $end
$var wire 1 D! data_result[11]~output_o $end
$var wire 1 E! data_result[12]~output_o $end
$var wire 1 F! data_result[13]~output_o $end
$var wire 1 G! data_result[14]~output_o $end
$var wire 1 H! data_result[15]~output_o $end
$var wire 1 I! data_result[16]~output_o $end
$var wire 1 J! data_result[17]~output_o $end
$var wire 1 K! data_result[18]~output_o $end
$var wire 1 L! data_result[19]~output_o $end
$var wire 1 M! data_result[20]~output_o $end
$var wire 1 N! data_result[21]~output_o $end
$var wire 1 O! data_result[22]~output_o $end
$var wire 1 P! data_result[23]~output_o $end
$var wire 1 Q! data_result[24]~output_o $end
$var wire 1 R! data_result[25]~output_o $end
$var wire 1 S! data_result[26]~output_o $end
$var wire 1 T! data_result[27]~output_o $end
$var wire 1 U! data_result[28]~output_o $end
$var wire 1 V! data_result[29]~output_o $end
$var wire 1 W! data_result[30]~output_o $end
$var wire 1 X! data_result[31]~output_o $end
$var wire 1 Y! isNotEqual~output_o $end
$var wire 1 Z! isLessThan~output_o $end
$var wire 1 [! overflow~output_o $end
$var wire 1 \! ctrl_ALUopcode[0]~input_o $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 !
b0 "
b0 #
b0 $
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0E
0F
0G
0H
1I
xJ
1K
1L
1M
0N
0O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0~
0!!
0"!
0#!
0$!
0%!
0&!
0'!
0(!
0)!
0*!
0+!
0,!
0-!
0.!
0/!
00!
01!
02!
03!
04!
05!
06!
07!
08!
09!
0:!
0;!
0<!
0=!
0>!
0?!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
0N!
0O!
0P!
0Q!
0R!
0S!
0T!
0U!
0V!
0W!
0X!
0Y!
0Z!
0[!
0\!
$end
#20000
b100000 #
b110000 #
b110100 #
b110110 #
b110111 #
1N
1O
1P
1R
1S
#70000
b1000000 $
1t
#130000
b0 $
0t
#140000
b1 !
1\!
19!
1D
#210000
b10111 #
b111 #
b11 #
b1 #
b0 #
0N
0O
0P
0R
0S
#270000
b0 !
0\!
09!
0D
#1000000
